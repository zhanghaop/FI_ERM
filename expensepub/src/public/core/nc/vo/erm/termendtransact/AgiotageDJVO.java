package nc.vo.erm.termendtransact;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

import nc.vo.pub.ValidationException;
import nc.vo.pub.ValueObject;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
/**
 * 此处插入类型说明。
 * 
 * 创建日期：(2001-6-25)
 * @author：
 */
public class AgiotageDJVO extends ValueObject {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2357813998183416518L;
	public String m_vouchid;/*主表id*/
	public String m_fb_oid;/*辅表id*/
	public String m_fkxyb_oid;/*付款协议表id*/
	public String m_ywbm;/*业务编码*/
	public String m_djdl;/*单据大类*/
	public String m_djlxmc;/*单据类型名称*/
	public String m_djbh;/*单据编号*/
	public Integer m_flbh;/*分录编号*/
	public UFDate m_djrq;/*单据日期*/
	public UFDate m_shrq;/*审核日期*/
	public UFDate m_xydqr;/*信用到期日*/
	public UFDouble m_ybye;/*原币余额*/
	public UFDouble m_fbye;/*辅币余额*/
	public UFDouble m_bbye;/*本币余额*/
	public int m_Fx;/*方向*/
	public String m_ordercusmandoc;/*订单客户*/
	public boolean m_IsLock;/*单据是否已经被锁定*/
	private UFDouble m_groupbb; /*集团本币金额*/
	private UFDouble m_globalbb; /*全局本币金额*/
	
	public UFDouble getGroupbb() {
		return m_groupbb;
	}
	public void setGroupbb(UFDouble mGroupbb) {
		m_groupbb = mGroupbb;
	}
	public UFDouble getGlobalbb() {
		return m_globalbb;
	}
	public void setGlobalbb(UFDouble mGlobalbb) {
		m_globalbb = mGlobalbb;
	}

	
	private String ts;
	

	public String getTs() {
		return ts;
	}
	public void setTs(String ts) {
		this.ts = ts;
	}
/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2001-6-25)
 */
public AgiotageDJVO() {

/*	// 对数据库表中有默认值的字段，根据默认值进行初始化：
	m_hxbh = new Integer(0);
	m_jfclybje = new UFDouble(0);
	m_jfclfbje = new UFDouble(0);
	m_jfclbbje = new UFDouble(0);
	m_dfclybje = new UFDouble(0);
	m_dfclfbje = new UFDouble(0);
	m_dfclbbje = new UFDouble(0);
	*/
}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2001-6-25)
 * @param ??fieldNameForMethod?? 主键值
 */
public AgiotageDJVO(String newClb_oid) {
/*
	// 为主键字段赋值:
	m_clb_oid = newClb_oid;
	// 对数据库表中有默认值的字段，根据默认值进行初始化：
	m_hxbh = new Integer(0);
	m_jfclybje = new UFDouble(0);
	m_jfclfbje = new UFDouble(0);
	m_jfclbbje = new UFDouble(0);
	m_dfclybje = new UFDouble(0);
	m_dfclfbje = new UFDouble(0);
	m_dfclbbje = new UFDouble(0);
	*/
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2001-6-25)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	AgiotageDJVO dJCLB = (AgiotageDJVO)o;

	// 你在下面复制本VO对象的所有属性：

	return dJCLB;
}
/**
 * 属性m_jfclybje的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return UFDouble
 */
public UFDouble getBbye() {
	return m_bbye;
}
/**
 * 属性m_djbh的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return String
 */
public String getDjbh() {
	return m_djbh;
}
/**
 * 属性m_djdl的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return String
 */
public String getDjdl() {
	return m_djdl;
}
/**
 * 此处插入方法说明。
 * 创建日期：(2001-12-17 15:16:56)
 * @return java.lang.String
 */
public String getDjlxmc() {
	return m_djlxmc;
}
/**
 * 属性m_djrq的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return UFDate
 */
public UFDate getDjrq() {
	return m_djrq;
}
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2001-6-25)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "DJCLB";
}
/**
 * 属性m_fb_oid的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return String
 */
public String getFboid() {
	return m_fb_oid;
}
/**
 * 属性m_jfclfbje的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return UFDouble
 */
public UFDouble getFbye() {
	return m_fbye;
}
/**
 * 属性m_fkxyb_oid的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return String
 */
public String getFkxyboid() {
	return m_fkxyb_oid;
}
/**
 * 属性m_flbh的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return Integer
 */
public Integer getFlbh() {
	return m_flbh;
}
/**
 * 主要功能：
 * 主要算法：
 * 异常描述：
 * 创建日期：(2001-8-10 18:58:48)
 * 最后修改日期：(2001-8-10 18:58:48)
 * @author：wyan
 * @return java.lang.Integer
 */
public int getFx() {
	return m_Fx;
}
/**
 * 此处插入方法说明。
 * 创建日期：(2001-12-17 11:02:40)
 * @return boolean
 */
public boolean getIsLock() {
	return m_IsLock;
}
/**
 * 此处插入方法描述。
 * 创建日期：(2003-11-10 15:23:15)
 * @return java.lang.String
 */
public String getOrderCusmanDoc() {
	return m_ordercusmandoc;
}
/**
 * 属性m_shrq的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return UFDate
 */
public UFDate getShrq() {
	return m_shrq;
}
/**
 * 属性m_vouchid的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return String
 */
public String getVouchid() {
	return m_vouchid;
}
/**
 * 属性m_xydqr的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return UFDate
 */
public UFDate getXydqr() {
	return m_xydqr;
}
/**
 * 属性m_jfclbbje的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return UFDouble
 */
public UFDouble getYbye() {
	return m_ybye;
}
/**
 * 属性m_ywbm的Getter方法。
 *
 * 创建日期：(2001-6-25)
 * @return String
 */
public String getYwbm() {
	return m_ywbm;
}
/**
 * 属性m_jfclybje的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_jfclybje UFDouble
 */
public void setBbye(UFDouble bbye) {

	m_bbye = bbye;
}
/**
 * 属性m_djbh的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_djbh String
 */
public void setDjbh(String newDjbh) {

	m_djbh = newDjbh;
}
/**
 * 属性m_djdl的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_djdl String
 */
public void setDjdl(String newDjdl) {

	m_djdl = newDjdl;
}
/**
 * 此处插入方法说明。
 * 创建日期：(2001-12-17 15:16:25)
 * @param djlxmc java.lang.String
 */
public void setDjlxmc(String djlxmc) {
    m_djlxmc = djlxmc;
}
/**
 * 属性m_djrq的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_djrq UFDate
 */
public void setDjrq(UFDate newDjrq) {

	m_djrq = newDjrq;
}
/**
 * 属性m_fb_oid的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_fb_oid String
 */
public void setFboid(String newFb_oid) {

	m_fb_oid = newFb_oid;
}
/**
 * 属性m_jfclfbje的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_jfclfbje UFDouble
 */
public void setFbye(UFDouble fbye) {

	m_fbye = fbye;
}
/**
 * 属性m_fkxyb_oid的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_fkxyb_oid String
 */
public void setFkxyboid(String newFkxyb_oid) {

	m_fkxyb_oid = newFkxyb_oid;
}
/**
 * 属性m_flbh的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_flbh Integer
 */
public void setFlbh(Integer newFlbh) {

	m_flbh = newFlbh;
}
/**
 * 主要功能：
 * 主要算法：
 * 异常描述：
 * 创建日期：(2001-8-10 18:59:19)
 * 最后修改日期：(2001-8-10 18:59:19)
 * @author：wyan
 * @param fx java.lang.Integer
 */
public void setFx(int fx) {
    m_Fx = fx;
}
/**
 * 此处插入方法说明。
 * 创建日期：(2001-12-17 11:24:17)
 * @param isLock boolean
 */
public void setIsLock(boolean isLock) {
    m_IsLock = isLock;
}
/**
 * 此处插入方法描述。
 * 创建日期：(2003-11-10 15:22:44)
 * @param order java.lang.String
 */
public void setOrderCusmanDoc(String order) {
    m_ordercusmandoc = order;
}
/**
 * 属性m_shrq的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_shrq UFDate
 */
public void setShrq(UFDate newShrq) {

	m_shrq = newShrq;
}
/**
 * 属性m_vouchid的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_vouchid String
 */
public void setVouchid(String newVouchid) {

	m_vouchid = newVouchid;
}
/**
 * 属性m_xydqr的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_xydqr UFDate
 */
public void setXydqr(UFDate newXydqr) {

	m_xydqr = newXydqr;
}
/**
 * 属性m_jfclbbje的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_jfclbbje UFDouble
 */
public void setYbye(UFDouble ybye) {

	m_ybye = ybye;
}
/**
 * 属性m_ywbm的setter方法。
 *
 * 创建日期：(2001-6-25)
 * @param newM_ywbm String
 */
public void setYwbm(String newYwbm) {

	m_ywbm = newYwbm;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2001-6-25)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {
/*
	ArrayList errFields = new ArrayList(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_clb_oid == null) {
		errFields.add(new String("m_clb_oid"));
	}
	if (m_dwbm == null) {
		errFields.add(new String("m_dwbm"));
	}
	if (m_djbh == null) {
		errFields.add(new String("m_djbh"));
	}
	if (m_ywbm == null) {
		errFields.add(new String("m_ywbm"));
	}
	if (m_flbh == null) {
		errFields.add(new String("m_flbh"));
	}
	if (m_clbz == null) {
		errFields.add(new String("m_clbz"));
	}
	if (m_clrq == null) {
		errFields.add(new String("m_clrq"));
	}
	if (m_clbh == null) {
		errFields.add(new String("m_clbh"));
	}
	if (m_hxbh == null) {
		errFields.add(new String("m_hxbh"));
	}
	if (m_jfclybje == null) {
		errFields.add(new String("m_jfclybje"));
	}
	if (m_jfclfbje == null) {
		errFields.add(new String("m_jfclfbje"));
	}
	if (m_jfclbbje == null) {
		errFields.add(new String("m_jfclbbje"));
	}
	if (m_clr == null) {
		errFields.add(new String("m_clr"));
	}
	if (m_vouchid == null) {
		errFields.add(new String("m_vouchid"));
	}
	if (m_fb_oid == null) {
		errFields.add(new String("m_fb_oid"));
	}
	if (m_fkxyb_oid == null) {
		errFields.add(new String("m_fkxyb_oid"));
	}
	if (m_dfclybje == null) {
		errFields.add(new String("m_dfclybje"));
	}
	if (m_dfclfbje == null) {
		errFields.add(new String("m_dfclfbje"));
	}
	if (m_dfclbbje == null) {
		errFields.add(new String("m_dfclbbje"));
	}
	if (m_clnd == null) {
		errFields.add(new String("m_clnd"));
	}
	if (m_clqj == null) {
		errFields.add(new String("m_clqj"));
	}
	if (m_jfclshl == null) {
		errFields.add(new String("m_jfclshl"));
	}
	if (m_dfclshl == null) {
		errFields.add(new String("m_dfclshl"));
	}
	if (m_djdl == null) {
		errFields.add(new String("m_djdl"));
	}
	if (m_djrq == null) {
		errFields.add(new String("m_djrq"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append("下列字段不能为空：");
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append("、");
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
	*/
}
}
