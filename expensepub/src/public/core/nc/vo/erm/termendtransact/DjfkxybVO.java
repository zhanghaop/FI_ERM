package nc.vo.erm.termendtransact;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

import java.util.ArrayList;

import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.NullFieldException;
import nc.vo.pub.ValidationException;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
/**
 * 此处插入类型说明。
 *
 * 创建日期：(2001-8-28)
 * @author：
 */
public class DjfkxybVO extends CircularlyAccessibleValueObject {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6008564344331868808L;
	public String m_fkxyb_oid;
	public String m_fb_oid;
	public String m_vouchid;
	public UFDate m_xydqr;
	public UFDouble m_jfybje;
	public UFDouble m_dfbbje;
	public UFDouble m_jffbje;
	public UFDouble m_ybye;
	public UFDouble m_fbye;
	public UFDouble m_dfybje;
	public UFDouble m_bbye;
	public UFDouble m_jfbbje;
	public UFDouble m_dffbje;
	public UFDouble m_jfshl;
	public UFDouble m_dfshl;
	public UFDouble m_shlye;
	public String m_sfkxyfb_oid;
	public UFDate m_lastzkrq ;
	public UFDouble m_lastzkl;
	private UFDouble m_jsybje;
	private UFDouble m_jsbbje;
	private UFDouble m_jsfbje;
	private UFDouble m_jsshl;
	private UFDouble m_jsybye;
	private UFDouble m_jsfbye;
	private UFDouble m_jsbbye;
	private UFDouble m_jsshlye; 
	private Integer dr=new Integer(0);

/**
 * 使用主键字段进行初始化的构造子。
 *
 * 创建日期：(2001-8-28)
 */
public DjfkxybVO() {

}
/**
 * 使用主键进行初始化的构造子。
 *
 * 创建日期：(2001-8-28)
 * @param ??fieldNameForMethod?? 主键值
 */
public DjfkxybVO(String newFkxyb_oid) {

	// 为主键字段赋值:
	m_fkxyb_oid = newFkxyb_oid;
}
/**
 * 根类Object的方法,克隆这个VO对象。
 *
 * 创建日期：(2001-8-28)
 */
public Object clone() {

	// 复制基类内容并创建新的VO对象：
	Object o = null;
	try {
		o = super.clone();
	} catch (Exception e) {}
	DjfkxybVO djfkxyb = (DjfkxybVO)o;

	// 你在下面复制本VO对象的所有属性：

	return djfkxyb;
}
/**
 * <p>需要在一个循环中访问的属性的名称数组。
 * <p>
 * 创建日期：(??Date??)
 * @return java.lang.String[]
 */
public java.lang.String[] getAttributeNames() {

	return new String[]{ "fb_oid", "vouchid", "xydqr", "jfybje", "dfbbje", "jffbje", "ybye", "fbye", "dfybje", "bbye", "jfbbje", "dffbje", "jfshl", "dfshl", "shlye", "sfkxyfb_oid", "lastzkrq", "lastzkl"
	        ,"m_jsybje","m_jsbbje","m_jsfbje","m_jsshl","m_jsybye","m_jsfbye","m_jsbbye","m_jsshlye","dr"};
}
/**
 *  <p>根据一个属性名称字符串该属性的值。
 *  <p>
 * 创建日期：(2001-8-28)
 * @param key java.lang.String
 */
public Object getAttributeValue(String attributeName) {

	if (attributeName.equals("fkxyb_oid")) {
		return m_fkxyb_oid;
	}
	else if (attributeName.equals("dr")) {
		return dr;
	}
	else if (attributeName.equals("fb_oid")) {
		return m_fb_oid;
	}
	else if (attributeName.equals("vouchid")) {
		return m_vouchid;
	}
	else if (attributeName.equals("xydqr")) {
		return m_xydqr;
	}
	else if (attributeName.equals("jfybje")) {
		return m_jfybje;
	}
	else if (attributeName.equals("dfbbje")) {
		return m_dfbbje;
	}
	else if (attributeName.equals("jffbje")) {
		return m_jffbje;
	}
	else if (attributeName.equals("ybye")) {
		return m_ybye;
	}
	else if (attributeName.equals("fbye")) {
		return m_fbye;
	}
	else if (attributeName.equals("dfybje")) {
		return m_dfybje;
	}
	else if (attributeName.equals("bbye")) {
		return m_bbye;
	}
	else if (attributeName.equals("jfbbje")) {
		return m_jfbbje;
	}
	else if (attributeName.equals("dffbje")) {
		return m_dffbje;
	}
	else if (attributeName.equals("jfshl")) {
		return m_jfshl;
	}
	else if (attributeName.equals("dfshl")) {
		return m_dfshl;
	}
	else if (attributeName.equals("shlye")) {
		return m_shlye;
	}
	else if (attributeName.equals("sfkxyfb_oid")) {
		return m_sfkxyfb_oid;
	}
	else if (attributeName.equals("lastzkrq")) {
		return m_lastzkrq;
	}
	else if (attributeName.equals("lastzkl")) {
		return m_lastzkl;
	} 
	else if (attributeName.equals("jsybje")) {
		return m_jsybje;
	}
	else if (attributeName.equals("jsbbje")) {
		return m_jsbbje;
	}
	else if (attributeName.equals("jsfbje")) {
		return m_jsfbje;
	}
	else if (attributeName.equals("jsshl")) {
		return m_jsshl;
	}
	else if (attributeName.equals("jsybye")) {
		return m_jsybye;
	}
	else if (attributeName.equals("jsfbye")) {
		return m_jsfbye;
	}
	else if (attributeName.equals("jsbbye")) {
		return m_jsbbye;
	}
	else if (attributeName.equals("jsshlye")) {
		return m_jsshlye;
	}
	return null;
}
/**
 * 属性m_bbye的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getBbye() {
	return m_bbye;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_dfbbje的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getDfbbje() {
	return m_dfbbje;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_dffbje的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getDffbje() {
	return m_dffbje;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_dfshl的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getDfshl() {
	return m_dfshl;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_dfybje的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getDfybje() {
	return m_dfybje;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 返回数值对象的显示名称。
 *
 * 创建日期：(2001-8-28)
 * @return java.lang.String 返回数值对象的显示名称。
 */
public String getEntityName() {

	return "Djfkxyb";
}
/**
 * 属性m_fb_oid的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return String
 */
public String getFb_oid() {
	return m_fb_oid;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_fbye的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getFbye() {
	return m_fbye;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 返回这个ValueObject类的所有FieldObject对象的集合。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject[]
 */
/**
 * 属性m_fkxyb_oid的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return String
 */
public String getFkxyb_oid() {
	return m_fkxyb_oid;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_jfbbje的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getJfbbje() {
	return m_jfbbje;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_jffbje的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getJffbje() {
	return m_jffbje;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_jfshl的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getJfshl() {
	return m_jfshl;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_jfybje的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getJfybje() {
	return m_jfybje;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_lastzkl的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getLastzkl() {
	return m_lastzkl;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_lastzkrq的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDate
 */
public UFDate getLastzkrq() {
	return m_lastzkrq;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 返回对象标识，用来唯一定位对象。
 *
 * 创建日期：(2001-8-28)
 * @return String
 */
public String getPrimaryKey() {

	return m_fkxyb_oid;
}
/**
 * 属性m_sfkxyfb_oid的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return String
 */
public String getSfkxyfb_oid() {
	return m_sfkxyfb_oid;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_shlye的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getShlye() {
	return m_shlye;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_vouchid的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return String
 */
public String getVouchid() {
	return m_vouchid;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_xydqr的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDate
 */
public UFDate getXydqr() {
	return m_xydqr;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 * 属性m_ybye的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return UFDouble
 */
public UFDouble getYbye() {
	return m_ybye;
}
/**
 * FieldObject的Getter方法。
 *
 * 创建日期：(2001-8-28)
 * @return nc.vo.pub.FieldObject
 */
/**
 *  <p>对参数name对型的属性设置值。
 *  <p>
 * 创建日期：(2001-8-28)
 * @param key java.lang.String
 */
public void setAttributeValue(String name, Object value) {

	try {
		if (name.equals("fkxyb_oid")) {
			m_fkxyb_oid = (String) value;
		}
		else if (name.equals("dr")) {
			dr = (Integer) value;
		}
		else if (name.equals("fb_oid")) {
			m_fb_oid = (String) value;
		}
		else if (name.equals("vouchid")) {
			m_vouchid = (String) value;
		}
		else if (name.equals("xydqr")) {
			m_xydqr = (UFDate) value;
		}
		else if (name.equals("jfybje")) {
			m_jfybje = (UFDouble) value;
		}
		else if (name.equals("dfbbje")) {
			m_dfbbje = (UFDouble) value;
		}
		else if (name.equals("jffbje")) {
			m_jffbje = (UFDouble) value;
		}
		else if (name.equals("ybye")) {
			m_ybye = (UFDouble) value;
		}
		else if (name.equals("fbye")) {
			m_fbye = (UFDouble) value;
		}
		else if (name.equals("dfybje")) {
			m_dfybje = (UFDouble) value;
		}
		else if (name.equals("bbye")) {
			m_bbye = (UFDouble) value;
		}
		else if (name.equals("jfbbje")) {
			m_jfbbje = (UFDouble) value;
		}
		else if (name.equals("dffbje")) {
			m_dffbje = (UFDouble) value;
		}
		else if (name.equals("jfshl")) {
			m_jfshl = (UFDouble) value;
		}
		else if (name.equals("dfshl")) {
			m_dfshl = (UFDouble) value;
		}
		else if (name.equals("shlye")) {
			m_shlye = (UFDouble) value;
		}
		else if (name.equals("sfkxyfb_oid")) {
			m_sfkxyfb_oid = (String) value;
		}
		else if (name.equals("lastzkrq")) {
			m_lastzkrq = (UFDate) value;
		}
		else if (name.equals("lastzkl")) {
			m_lastzkl = (UFDouble) value;
		}
		else if (name.equals("jsybje")) {
			  m_jsybje=(UFDouble) value;
		}
		else if (name.equals("jsbbje")) {
			  m_jsbbje=(UFDouble) value;
		}
		else if (name.equals("jsfbje")) {
			  m_jsfbje=(UFDouble) value;
		}
		else if (name.equals("jsshl")) {
			  m_jsshl=(UFDouble) value;
		}
		else if (name.equals("jsybye")) {
			    m_jsybye=(UFDouble) value;
		}
		else if (name.equals("jsfbye")) {
			  m_jsfbye=(UFDouble) value;
		}
		else if (name.equals("jsbbye")) {
			  m_jsbbye=(UFDouble) value;
		}
		else if (name.equals("jsshlye")) {
			  m_jsshlye=(UFDouble) value;
		}
	}
	catch (ClassCastException e) {
		throw new ClassCastException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("200602","UPP200602-000040")/*@res "setAttributeValue方法中为 "*/ + name + nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("200602","UPP200602-000041")/*@res " 赋值时类型转换错误！（值："*/ + value + nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("200602","UPP200602-000042")/*@res "）"*/);
	}
}
/**
 * 属性m_bbye的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_bbye UFDouble
 */
public void setBbye(UFDouble newBbye) {

	m_bbye = newBbye;
}
/**
 * 属性m_dfbbje的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_dfbbje UFDouble
 */
public void setDfbbje(UFDouble newDfbbje) {

	m_dfbbje = newDfbbje;
}
/**
 * 属性m_dffbje的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_dffbje UFDouble
 */
public void setDffbje(UFDouble newDffbje) {

	m_dffbje = newDffbje;
}
/**
 * 属性m_dfshl的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_dfshl UFDouble
 */
public void setDfshl(UFDouble newDfshl) {

	m_dfshl = newDfshl;
}
/**
 * 属性m_dfybje的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_dfybje UFDouble
 */
public void setDfybje(UFDouble newDfybje) {

	m_dfybje = newDfybje;
}
/**
 * 属性m_fb_oid的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_fb_oid String
 */
public void setFb_oid(String newFb_oid) {

	m_fb_oid = newFb_oid;
}
/**
 * 属性m_fbye的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_fbye UFDouble
 */
public void setFbye(UFDouble newFbye) {

	m_fbye = newFbye;
}
/**
 * 属性m_fkxyb_oid的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_fkxyb_oid String
 */
public void setFkxyb_oid(String newFkxyb_oid) {

	m_fkxyb_oid = newFkxyb_oid;
}
/**
 * 属性m_jfbbje的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_jfbbje UFDouble
 */
public void setJfbbje(UFDouble newJfbbje) {

	m_jfbbje = newJfbbje;
}
/**
 * 属性m_jffbje的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_jffbje UFDouble
 */
public void setJffbje(UFDouble newJffbje) {

	m_jffbje = newJffbje;
}
/**
 * 属性m_jfshl的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_jfshl UFDouble
 */
public void setJfshl(UFDouble newJfshl) {

	m_jfshl = newJfshl;
}
/**
 * 属性m_jfybje的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_jfybje UFDouble
 */
public void setJfybje(UFDouble newJfybje) {

	m_jfybje = newJfybje;
}
/**
 * 属性m_lastzkl的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_lastzkl UFDouble
 */
public void setLastzkl(UFDouble newLastzkl) {

	m_lastzkl = newLastzkl;
}
/**
 * 属性m_lastzkrq的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_lastzkrq UFDate
 */
public void setLastzkrq(UFDate newLastzkrq) {

	m_lastzkrq = newLastzkrq;
}
/**
 * 设置对象标识，用来唯一定位对象。
 *
 * 创建日期：(2001-8-28)
 * @param m_fkxyb_oid String
 */
public void setPrimaryKey(String newFkxyb_oid) {

	m_fkxyb_oid = newFkxyb_oid;
}
/**
 * 属性m_sfkxyfb_oid的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_sfkxyfb_oid String
 */
public void setSfkxyfb_oid(String newSfkxyfb_oid) {

	m_sfkxyfb_oid = newSfkxyfb_oid;
}
/**
 * 属性m_shlye的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_shlye UFDouble
 */
public void setShlye(UFDouble newShlye) {

	m_shlye = newShlye;
}
/**
 * 属性m_vouchid的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_vouchid String
 */
public void setVouchid(String newVouchid) {

	m_vouchid = newVouchid;
}
/**
 * 属性m_xydqr的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_xydqr UFDate
 */
public void setXydqr(UFDate newXydqr) {

	m_xydqr = newXydqr;
}
/**
 * 属性m_ybye的setter方法。
 *
 * 创建日期：(2001-8-28)
 * @param newM_ybye UFDouble
 */
public void setYbye(UFDouble newYbye) {

	m_ybye = newYbye;
}
/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2001-8-28)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

	ArrayList<String> errFields = new ArrayList<String>(); // errFields record those null fields that cannot be null.
	// 检查是否为不允许空的字段赋了空值，你可能需要修改下面的提示信息：
	if (m_fkxyb_oid == null) {
		errFields.add(new String("m_fkxyb_oid"));
	}
	if (m_fb_oid == null) {
		errFields.add(new String("m_fb_oid"));
	}
	if (m_vouchid == null) {
		errFields.add(new String("m_vouchid"));
	}
	if (m_xydqr == null) {
		errFields.add(new String("m_xydqr"));
	}
	if (m_jfybje == null) {
		errFields.add(new String("m_jfybje"));
	}
	if (m_dfbbje == null) {
		errFields.add(new String("m_dfbbje"));
	}
	if (m_jffbje == null) {
		errFields.add(new String("m_jffbje"));
	}
	if (m_ybye == null) {
		errFields.add(new String("m_ybye"));
	}
	if (m_fbye == null) {
		errFields.add(new String("m_fbye"));
	}
	if (m_dfybje == null) {
		errFields.add(new String("m_dfybje"));
	}
	if (m_bbye == null) {
		errFields.add(new String("m_bbye"));
	}
	if (m_jfbbje == null) {
		errFields.add(new String("m_jfbbje"));
	}
	if (m_dffbje == null) {
		errFields.add(new String("m_dffbje"));
	}
	if (m_jfshl == null) {
		errFields.add(new String("m_jfshl"));
	}
	if (m_dfshl == null) {
		errFields.add(new String("m_dfshl"));
	}
	if (m_shlye == null) {
		errFields.add(new String("m_shlye"));
	}
	if (m_sfkxyfb_oid == null) {
		errFields.add(new String("m_sfkxyfb_oid"));
	}
	// construct the exception message:
	StringBuffer message = new StringBuffer();
	message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("200602","UPP200602-000043")/*@res "下列字段不能为空："*/);
	if (errFields.size() > 0) {
		String[] temp = (String[]) errFields.toArray(new String[0]);
		message.append(temp[0]);
		for ( int i= 1; i < temp.length; i++ ) {
			message.append(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("200602","UPP200602-000044")/*@res "、"*/);
			message.append(temp[i]);
		}
		// throw the exception:
		throw new NullFieldException(message.toString());
	}
}
public Integer getDr() {
	return dr;
}
public void setDr(Integer dr) {
	this.dr = dr;
}
}